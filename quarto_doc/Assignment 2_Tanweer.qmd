---
author:
  - name: Ropafadzo Chimuti
    email: CHMROP002@myuct.ac.za
  - name: Tanweer Nujjoo
    email: NJJSYE001@myuct.ac.za
  - name: Steven Ellis
    email: ELLSTE005@uct.ac.za
    
title: A Descriptive Analysis of the South African Presidential State of the Nation Address (SONA) - 1994 to 2023
keywords: SONA, text modelling, sentiment analysis, latent Dirichlet allocation, LDA, bag-of-words
abstract: |
  Summary of motivation and outcome. Start with context, task and object, finish with findings and conclusion. This is written last.

bibliography: bibliography_Tanweer.bib
format:
   pdf: 
       toc: true
       number-sections: true
       extra_dependencies: ["float"]
       header-includes:
            - \usepackage{hyperref}
            - \usepackage{graphicx}
            - \usepackage[labelfont=bf]{caption}
            - \captionsetup[table]{font=scriptsize}
            - \captionsetup[figure]{font=scriptsize}
            - \usepackage{vmargin}  # Adjust the margin width here
            - \setmarginsrb{2 cm}{0.5 cm}{2 cm}{1 cm}{1 cm}{1 cm}{1 cm}{1 cm}
       fig-pos: 'H'
       fig-format: pdf
editor: source

    # journal:
    #   id: jacsat  #This is an identifier for the target journal: from https://pubs.acs.org/, the identifier is the part of the URL after https://pubs.acs.org/journal/, e.g. for J. Org. Chem. it would be joceah.
    #   type: article  #article, note, communication, review, letter, or perspectivee
    #   layout: traditional #traditional or twocolumn, twocolumn currently broken for longtables
    #   hide-email: false # if enabled, hides email addresses (and fax/phone)
    #   abbreviations: IR,NMR,UV
---

```{r libraries, message=FALSE, warning=FALSE, results='hide', echo=FALSE}
library(stringr)
library(tidyverse)
library(tidytext)
library(textstem)
library(textdata)
library(tm)
library(MASS)
library(topicmodels)
library(knitr)
```

```{r extract, message=FALSE, warning=FALSE, results='hide', echo=FALSE}
set.seed(2023)

# Set working folder to parent folder
WD <- getwd()
if (!is.null(WD)) setwd(WD)
setwd('../')

# read in text data files and organise these into a data frame
filenames <- c('1994_post_elections_Mandela.txt', '1994_pre_elections_deKlerk.txt', '1995_Mandela.txt', '1996_Mandela.txt', '1997_Mandela.txt', '1998_Mandela.txt', 
               '1999_post_elections_Mandela.txt', '1999_pre_elections_Mandela.txt', '2000_Mbeki.txt', '2001_Mbeki.txt', '2002_Mbeki.txt', '2003_Mbeki.txt', 
               '2004_post_elections_Mbeki.txt', '2004_pre_elections_Mbeki.txt', '2005_Mbeki.txt', '2006_Mbeki.txt', '2007_Mbeki.txt', '2008_Mbeki.txt', 
               '2009_post_elections_Zuma.txt', '2009_pre_elections_ Motlanthe.txt', '2010_Zuma.txt', '2011_Zuma.txt', '2012_Zuma.txt', '2013_Zuma.txt', 
               '2014_post_elections_Zuma.txt', '2014_pre_elections_Zuma.txt', '2015_Zuma.txt', '2016_Zuma.txt', '2017_Zuma.txt', '2018_Ramaphosa.txt', 
               '2019_post_elections_Ramaphosa.txt', '2019_pre_elections_Ramaphosa.txt', '2020_Ramaphosa.txt', '2021_Ramaphosa.txt', '2022_Ramaphosa.txt', '2023_Ramaphosa.txt')


this_speech <- c()
this_speech[1] <- readChar('./sona-addresses-1994-2023/1994_post_elections_Mandela.txt', nchars = 27050)
this_speech[2] <- readChar('./sona-addresses-1994-2023/1994_pre_elections_deKlerk.txt', nchars = 12786)
this_speech[3] <- readChar('./sona-addresses-1994-2023/1995_Mandela.txt', nchars = 39019)
this_speech[4] <- readChar('./sona-addresses-1994-2023/1996_Mandela.txt', nchars = 39524)
this_speech[5] <- readChar('./sona-addresses-1994-2023/1997_Mandela.txt', nchars = 37489)
this_speech[6] <- readChar('./sona-addresses-1994-2023/1998_Mandela.txt', nchars = 45247)
this_speech[7] <- readChar('./sona-addresses-1994-2023/1999_post_elections_Mandela.txt', nchars = 34674)
this_speech[8] <- readChar('./sona-addresses-1994-2023/1999_pre_elections_Mandela.txt', nchars = 41225)
this_speech[9] <- readChar('./sona-addresses-1994-2023/2000_Mbeki.txt', nchars = 37552)
this_speech[10] <- readChar('./sona-addresses-1994-2023/2001_Mbeki.txt', nchars = 41719)
this_speech[11] <- readChar('./sona-addresses-1994-2023/2002_Mbeki.txt', nchars = 50544)
this_speech[12] <- readChar('./sona-addresses-1994-2023/2003_Mbeki.txt', nchars = 58284)
this_speech[13] <- readChar('./sona-addresses-1994-2023/2004_post_elections_Mbeki.txt', nchars = 34590)
this_speech[14] <- readChar('./sona-addresses-1994-2023/2004_pre_elections_Mbeki.txt', nchars = 39232)
this_speech[15] <- readChar('./sona-addresses-1994-2023/2005_Mbeki.txt', nchars = 54635)
this_speech[16] <- readChar('./sona-addresses-1994-2023/2006_Mbeki.txt', nchars = 48643)
this_speech[17] <- readChar('./sona-addresses-1994-2023/2007_Mbeki.txt', nchars = 48641)
this_speech[18] <- readChar('./sona-addresses-1994-2023/2008_Mbeki.txt', nchars = 44907)
this_speech[19] <- readChar('./sona-addresses-1994-2023/2009_post_elections_Zuma.txt', nchars = 31101)
this_speech[20] <- readChar('./sona-addresses-1994-2023/2009_pre_elections_Motlanthe.txt', nchars = 47157)
this_speech[21] <- readChar('./sona-addresses-1994-2023/2010_Zuma.txt', nchars = 26384)
this_speech[22] <- readChar('./sona-addresses-1994-2023/2011_Zuma.txt', nchars = 33281)
this_speech[23] <- readChar('./sona-addresses-1994-2023/2012_Zuma.txt', nchars = 33376)
this_speech[24] <- readChar('./sona-addresses-1994-2023/2013_Zuma.txt', nchars = 36006)
this_speech[25] <- readChar('./sona-addresses-1994-2023/2014_post_elections_Zuma.txt', nchars = 29403)
this_speech[26] <- readChar('./sona-addresses-1994-2023/2014_pre_elections_Zuma.txt', nchars = 36233)
this_speech[27] <- readChar('./sona-addresses-1994-2023/2015_Zuma.txt', nchars = 32860)
this_speech[28] <- readChar('./sona-addresses-1994-2023/2016_Zuma.txt', nchars = 32464)
this_speech[29] <- readChar('./sona-addresses-1994-2023/2017_Zuma.txt', nchars = 35981)
this_speech[30] <- readChar('./sona-addresses-1994-2023/2018_Ramaphosa.txt', nchars = 33290)
this_speech[31] <- readChar('./sona-addresses-1994-2023/2019_post_elections_Ramaphosa.txt', nchars = 42112)
this_speech[32] <- readChar('./sona-addresses-1994-2023/2019_pre_elections_Ramaphosa.txt', nchars = 56960)
this_speech[33] <- readChar('./sona-addresses-1994-2023/2020_Ramaphosa.txt', nchars = 47910)
this_speech[34] <- readChar('./sona-addresses-1994-2023/2021_Ramaphosa.txt', nchars = 43352)
this_speech[35] <- readChar('./sona-addresses-1994-2023/2022_Ramaphosa.txt', nchars = 52972)
this_speech[36] <- readChar('./sona-addresses-1994-2023/2023_Ramaphosa.txt', nchars = 53933)

sona <- data.frame(filename = filenames, speech = this_speech, stringsAsFactors = FALSE)

# extract year and president for each speech
sona$year <- str_sub(sona$filename, start = 1, end = 4)
sona$president_13 <- str_remove_all(str_extract(sona$filename, "[dA-Z].*\\."), "\\.")

# clean the sona dataset by adding the date and removing unnecessary text
replace_reg <- '(http.*?(\\s|.$))|(www.*?(\\s|.$))|&amp;|&lt;|&gt;|\n'

sona <-sona %>%
  mutate(speech = str_replace_all(speech, replace_reg , ' ')
         ,date = str_sub(speech, start=1, end=30)
         ,date = str_replace_all(date, "February", "02")
         ,date = str_replace_all(date, "June", "06")
         ,date = str_replace_all(date, "Feb", "02")
         ,date = str_replace_all(date, "May", "05")
         ,date = str_replace_all(date, "Jun", "06")
         ,date = str_replace_all(date, "Thursday, ","")
         ,date = str_replace_all(date, ' ', '-')        
         ,date = str_replace_all(date, "[A-z]",'')
         ,date = str_replace_all(date, '-----', '')
         ,date = str_replace_all(date, '----', '')
         ,date = str_replace_all(date, '---', '')
         ,date = str_replace_all(date, '--', '')
  )

```

```{r Main data cleaning, message=FALSE, warning=FALSE, results='hide', echo=FALSE}

# Set speech to lower case + lemmatize
sona <- sona %>%
  mutate(speech = lemmatize_strings(tolower(speech)))
 
sona <- as_tibble(sona) # convert dataframe to tibble
sona <- sona[,-1] # removing first column
unnest_reg <- "[^\\w_#@']"

# Remove common SONA words that are used very regularly, but which don't convey too much meaning
common_sona_reg <- 'speaker|madame|honourable|chairperson|development|national|ensure|deputy|africa|african|africans|south|southern|government|people|programme|economic|economy|country|continue'
```

```{r Sentiment dictionaries, message=FALSE, warning=FALSE, results='hide', echo=FALSE}
# import sentiment dictionaries

bing <- get_sentiments('bing') 
#unique(bing$sentiment)

nrc <- get_sentiments('nrc') 
#unique(nrc$sentiment)

save(bing, nrc, file = "dsfi-lexicons.Rdata")
```

\newpage

# Introduction

# Materials and Methods

This section describes thoroughly the procedures undertaken to conduct a descriptive analysis of the content of speeches using sentiment analysis and topic modelling. The entire implementation of this task was performed using RStudio, therefore the functions and libraries used throughout the process corresponds to R. However, the equivalence of this analysis can definitely be replicated on other programming platforms. There are various ways to wrangle data and only the "not so obvious" functions were explained in this report. It should be further noted that all the plots produced in this report were generated either via the `ggplot()` function from the `ggplot2` library.

## Brief Overview of SONA dataset

*Ropa's section*

## Data Pre-processing & Cleaning

Raw data retrieval tends to always be messy based on the overview given about the SONA dataset in the previous section. So, tabulating the text files needed some pre-processing where the years at which the speeches occurred were extracted by identifying the first 4 strings from the filenames and attributed them to a new column. Additionally, the names of the presidents were extracted from the filenames. Within the process of extracting the presidents' names, string manipulation was performed to remove unnecessary regular expressions. Although, the dates were not specifically used in our analysis, they were parsed in a new column for our own perusal. All the unnecessary regular expressions like "`(http.*?(...`" from the speeches were also removed. All those manipulations were done using the `stringr` library. Now that we were only dealing with words, we had to make sure that all the speeches were converted to lower cases and lemmatised to avoid any redundancies. The function used to perform the lemmatisation task, was `lemmatize_strings()` from the `textstem` library. Finally, the data was converted into a tibble.

## Central Preliminary Procedure 1 {#sec-PreliminaryProcedure1}

As an initial step prior to any analyses in the whole methodology section, if the tokenisation (refer to @sec-OverallAnalysis for an explanation on the concept of tokenisation) involved:

\begin{enumerate}
  \item  words, only the lowercase words were first detected using the matching pattern \textbf{[a-z]} and filtered. Then, the stop words (i.e, prepositions and connecting words) from the SMART lexicon of the \textbf{tidytext}  library were removed as they do not convey valid information. In addition, some common and obvious words across all the speeches like "speaker", "madame", "honourable", "chairperson", "development", "national", "ensure", "deputy", "africa", "african", "africans", "south", "southern", "government", "people", "programme", "economic", "economy", "country" and "continue" which would act like noise in our analyses, hence were filtered out.
  
  \item  bigrams, each word was separated into 2 different columns and then step 1 was repeated for each column. Then the cleaned separated words were united back in one column.
  
  \item  trigrams, each word was separated into 3 different columns and then step 1 was repeated for each column. Then the cleaned separated words were united back in one column.
\end{enumerate}

## Overall Analysis {#sec-OverallAnalysis}

For any upcoming analyses, the speeches had to be tokenised accordingly to fit the purpose of our analyses. Tokenisation is the split of a sequence of characters in a text by locating the word boundaries [@palmer2000tokenisation]. The atomicity of the split could be in terms of per characters, per words, per n-grams, per sentences and more. So, tokenisation is always application dependent. For our purpose, tokenising per words and per n-grams were relevant. This was simply done using the `unnest_tokens()` function from the `tidytext` library. n-gram is a terminology very well known in the world of natural language processing (NLP), and it simply refers to a sequence of n words. If n=1, it is referred to as a unigram, if n=2, it is referred to as a bigram and if n=3, it is referred to as a trigram. The overall analysis sought to reveal the top 20 words, bigrams and trigrams used by all presidents. The steps to achieve these, followed the main procedures highlighted in @sec-PreliminaryProcedure1. Then for each case, the words, bigrams and trigrams were counted, sorted in descending order and sliced to the first 20 elements. Furthermore, they were all plotted as barplots.

A more in-depth overall analysis was performed by aggregating the above per president. However, only the overall words and trigrams used per presidents were analysed. The bigrams ones were omitted as the idea was, if we were to use more than a word to do more in-depth analysis, we might as well use the trigrams as those would convey more meaningful information. So, the exact methods explained in the above paragraph were implemented with the exception that the presidents were first filtered in that same procedural pipeline.

## Central Preliminary Procedure 2 {#sec-PreliminaryProcedure2}

This procedure is sentiment-focused rather than use for an overall analysis purpose. Nevertheless, it follows similar steps as in @sec-PreliminaryProcedure1 with slight updates. Note that the bigram part is omitted here based on the aforementioned argument in @sec-OverallAnalysis. As usual, an initial step prior to any sentiment analyses, if the tokenisation involved:

\begin{enumerate}
  \item  words, only the lowercase words were first detected using the matching pattern \textbf{[a-z]} and filtered. Then, the stop words (i.e, prepositions and connecting words) from the SMART lexicon of the \textbf{tidytext} library were removed as they do not convey valid information. The same common and obvious words across all the speeches as detailed in Section \ref{sec-PreliminaryProcedure1} would act like noise in our analyses, hence were filtered out. The relevant dictionary (further description about dictionaries is detailed in Section \ref{sec-SentimentAnalysisMethodology}) was left joined to the cleaned dataset on the words so that the words in the speeches would have a sentiment attached to it. Obviously, not all the words in the speeches were present in the dictionaries. Therefore, words that did not have a label were mutated to "neutral".

  \item  trigrams, each word was separated into 3 different columns and then step 1 was repeated for each column. Then the cleaned separated words were united back in one column. Because we were dealing with trigrams, the sentiments had to be polarised (i.e, "positive" = 1, "neutral" = 0 and "negative" = -1) in order to be able to calculate a final sentiment score for all the trio of words. That was based on the sum of all polarised sentiment belonging to each trio of words. Moreover, if the final sentiment score = 0, the trigrams would remain as "neutral". If the final sentiment score $\geq$ 1, the trigrams would be "positive" and if the final sentiment score < 1, the trigrams would be "negative".
\end{enumerate}

## Sentiment Analysis {#sec-SentimentAnalysisMethodology}

According to @medhat2014sentiment, sentiment analysis also known as the opinion mining study people's opinions, attitudes, and emotions towards an entity in a computational manner and can also be considered as a classification process. Our sentiment analysis took a lexicon dictionary-based approach which is considered as a very feasible approach as it does not involve any training data and advanced machine learning techniques [@wankhade2022survey]. For this reason, some experts like @yan2010integrating also referred to this approach as an unsupervised approach. The 2 main dictionaries used in our analyses were `bing` and `nrc`.

The `bing` dictionary was loaded from the `tidytext` library. Each of the 6786 words in the dictionary is assigned to a binary sentiment of either positive or negative. The main disadvantage of the lexicon approach is that it is highly domain-oriented. Indeed, during some analysis, words like "anti poverty", "anti corruption", and so on were classified as negative sentiment as the word "anti" did not exist in the `bing` dictionary. Therefore, this issue was resolved by adding the word "anti" in the `bing` dictionary and assigned a positive sentiment to it as this label fits the context of this analysis. This part of the sentiment analysis explored the top 20 positive and negative words and trigrams used by all presidents. The steps to achieve these, followed the main procedures highlighted in @sec-PreliminaryProcedure2. Then for each case, the words and trigrams were filtered by either "positive" or "negative" sentiment, followed by a count and a sort in descending order and eventually sliced to the first 20 elements. Furthermore, they were all plotted as barplots.

A more in-depth sentiment analysis was performed by aggregating the above per president. The exact methods explained in the above paragraph were implemented with the exception that the presidents were first filtered in that same procedural pipeline. It was also vital to investigate the variation of positive and negative sentiments over the years while excluding deKlerk and Motlanthe as they were only 1-term presidents. Those investigations were done for both words and trigrams by following the procedure as described in @sec-PreliminaryProcedure2 and then plotted as barplots and line graphs. The only key aspect here was to group the sentiment and year before counting how many positive and negative sentiments were recorded per year. 

*Ropa: nrc dictionary descriptions*

## Topic Modelling

*Steven's section*
*Summary of topic modelling, LDA. Tools used for LDA (R packages), how data was pre-processed for LDA, and techniques used.*

# Results & Discussions

## Overall Analysis

```{r Top 20 words/bigrams/trigrams used by all presidents, message=FALSE, warning=FALSE, results='hide', echo=FALSE}

# OVERALL COMMON WORDS ANALYSIS -------------------------------------------
#  Most common words used by all presidents -------------------------------
overall_common_words <- sona %>% 
  unnest_tokens(word, speech, token = 'regex', pattern = unnest_reg) %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 words used by all presidents") +
  theme(plot.title = element_text(size = 7), 
        axis.title.x = element_text(size = 7), 
        axis.title.y = element_text(size = 7),
        axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 7),
        legend.position = '')+
  scale_fill_gradient(low = "black", high = "grey")



# Most common bigram used by all presidents -------------------------------
overall_common_bigram <- sona %>% 
  unnest_tokens(bigram, speech, token = 'ngrams', n=2) %>%
  separate(bigram, c('word1', 'word2'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  unite(bigram, word1, word2, sep = ' ') %>%
  count(bigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(bigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 bigrams used by all presidents") +
  theme(plot.title = element_text(size = 7), 
        axis.title.x = element_text(size = 7), 
        axis.title.y = element_text(size = 7),
        axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 7),
        legend.position = '')+
  scale_fill_gradient(low = "black", high = "grey")


# Most common trigram used by all presidents ------------------------------
overall_common_trigram <- sona %>% 
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 trigrams used by all presidents") +
  theme(plot.title = element_text(size = 7), 
        axis.title.x = element_text(size = 7), 
        axis.title.y = element_text(size = 7),
        axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 7),
        legend.position = '')+
  scale_fill_gradient(low = "black", high = "grey")

```

An overall analysis was executed on the speeches to extract the top 20 words, bigrams and trigrams used by all the presidents to obtain an idea about which of those conveyed meaningful information. 

@fig-A represents the top 20 words, bigrams and trigrams used by all presidents. Plot **A** showcases that all presidents would obviously address the public most of the time. Moreover, the top words were linked to development and were very businessy. Plot **B** were way more meaningful than plot **A** and it seemed like majority of presidents were addressing private sectors more than public sectors in their speeches. They addressed the unity of nations, job creations, justice system and specific locations in South Africa. Nelson Mandela seemed to have been a model to the other presidents being the first anti-apartheid activist and president of the country, hence mentioned several times. The 2010 FIFA world cup that was held in South Africa brought such a positive and festive vibe in Cape Town, no wonder why it was in the top 20 bigrams. Plot **C** was even more meaningful and we could observe that the bigram "justice system" and "criminal justice" were the least occurred words in the top 20 bigram plot. That was because those particular bigrams were not that meaningful, as such plot **C**

```{r fig-A, message=FALSE, warning=FALSE, results='hide', echo=FALSE, fig.align='center', fig.cap="Top 20 words, pair of words (bigrams), and trio of words (trigrams) used by all presidents.", fig.width = 10}

# combining above plots in one figure
cowplot::plot_grid(overall_common_words, overall_common_bigram, overall_common_trigram,
                   nrow = 1, ncol = 3, labels = "AUTO", label_size = 6, label_x = 0) +
  theme(plot.background = element_rect(color = "black", linewidth = 2))
```

revealed the real meaning of the words being criminal justice system, hence that trigram had the highest occurrence. In addition, a lot of projects like trade union movement, public private partnership, child support grant, adult basic education, continental free trade, community of forum and more were the subject matter amid presidents. The economy of the country was also address in terms of the gross domestic product (GDP), however, problems like gender-based violence outweighed the number of occurrences for the country's GDP, and this priority was valid here. 

```{r Top 20 words used by each of the presidents, message=FALSE, warning=FALSE, results='hide', echo=FALSE}
# PER PRESIDENT COMMON WORDS ANALYSIS -------------------------------------
# Most common words used per president ------------------------------------
common_words_Mandela <- sona %>% 
  filter(president_13 == 'Mandela') %>%
  unnest_tokens(word, speech, token = 'regex', pattern = unnest_reg) %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 words used by Mandela") +
  theme(plot.title = element_text(size = 11), legend.position = '') +
  scale_fill_gradient(low = "deeppink3", high = "pink")

common_words_deKlerk <- sona %>% 
  filter(president_13 == 'deKlerk') %>%
  unnest_tokens(word, speech, token = 'regex', pattern = unnest_reg) %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 words used by deKlerk") +
  theme(plot.title = element_text(size = 11), legend.position = '') +
  scale_fill_gradient(low = "chocolate", high = "burlywood1")

common_words_Mbeki <- sona %>% 
  filter(president_13 == 'Mbeki') %>%
  unnest_tokens(word, speech, token = 'regex', pattern = unnest_reg) %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 words used by Mbeki") +
  theme(plot.title = element_text(size = 11), legend.position = '')


common_words_Zuma <- sona %>% 
  filter(president_13 == 'Zuma') %>%
  unnest_tokens(word, speech, token = 'regex', pattern = unnest_reg) %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 words used by Zuma") +
  theme(plot.title = element_text(size = 11), legend.position = '') + 
  scale_fill_gradient(low = "magenta4", high = "plum")


common_words_Motlanthe <- sona %>% 
  filter(president_13 == 'Motlanthe') %>%
  unnest_tokens(word, speech, token = 'regex', pattern = unnest_reg) %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 words used by Motlanthe") +
  theme(plot.title = element_text(size = 11), legend.position = '') + 
  scale_fill_gradient(low = "darkcyan", high = "paleturquoise")


common_words_Ramaphosa<- sona %>% 
  filter(president_13 == 'Ramaphosa') %>%
  unnest_tokens(word, speech, token = 'regex', pattern = unnest_reg) %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 words used by Ramaphosa") +
  theme(plot.title = element_text(size = 11), legend.position = '') + 
  scale_fill_gradient(low = "darkgreen", high = "darkseagreen1")

```

The top 20 words used by each president are represented @fig-B. Based on the words of Mandela, he really demonstrated a presidency that was committed to public service, inclusivity, community building, and addressing a range of social, economic, and security-related challenges. Mandela's leadership was marked by a dedication to nation-building, reconciliation, and addressing the needs of the people. In general, deKlerk's top 20 words were very political, which completely makes sense because he had to promote a peaceful post-apartheid transition. His presidency was characterised by significant political, constitutional, and social changes, aimed at ending apartheid and establishing a more inclusive and democratic South Africa. The top 20 words reflected the complex and multifaceted nature of the challenges he faced and the efforts he made to transform the country's political landscape. Based on the top 20 words from Mbeki, it seemed like his presidency was marked by a commitment to improving public services, addressing social issues, promoting economic growth and development, and addressing significant challenges. His top 20 words were not that meaningful because that is basically what all presidents would want to achieve in a society. Among the top 20 words of Zuma, the ones that really stood out were energy and water as during his presidency, he was dealing with some energy and water crisis. The top 20 words for Motlanthe became quite repetitive at this point. We saw that he still dealt with some crisis, poverty and other challenges. Interestingly, he was the first president from which the word poverty was first appeared in the top tiers. Ramaphosa's top 20 words revealed a lot about his personality. He is a businessman, so his approach as president was very business-oriented. He seemed to have priorited economic development, job creation, and social welfare during his term as president.

```{r fig-B, message=FALSE, warning=FALSE, results='hide', echo=FALSE, fig.align='center', fig.cap="Top 20 words used by each president. **A** relates to Mandela's words, **B** relates to deKlerk's words, **C** relates to Mbeki's words, **D** relates to Zuma's words, **E** relates to Motlanthe's words, and **F** relates to Ramaphosa's words.", fig.width = 10, fig.height = 10}
# combining above plots in one figure
cowplot::plot_grid(common_words_Mandela, common_words_deKlerk,
                   common_words_Mbeki, common_words_Zuma,
                   common_words_Motlanthe, common_words_Ramaphosa,
                   nrow = 3, ncol = 2, labels = "AUTO", label_size = 10, label_x = 0) +
  theme(plot.background = element_rect(color = "black", linewidth = 2))
```

```{r Top 20 trigrams used by each of the presidents, message=FALSE, warning=FALSE, results='hide', echo=FALSE}

# Most common trigram used per president ----------------------------------
common_trigram_Mandela <- sona %>% 
  filter(president_13 == 'Mandela') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 trigrams used by Mandela") +
  theme(plot.title = element_text(size = 11), legend.position = '') +
  scale_fill_gradient(low = "deeppink3", high = "pink")

common_trigram_deKlerk <- sona %>% 
  filter(president_13 == 'deKlerk') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 trigrams used by deKlerk") +
  theme(plot.title = element_text(size = 11), legend.position = '') +
  scale_fill_gradient(low = "chocolate", high = "burlywood1")
  
common_trigram_Mbeki <- sona %>% 
  filter(president_13 == 'Mbeki') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 trigrams used by Mbeki") +
  theme(plot.title = element_text(size = 11), legend.position = '') 

common_trigram_Zuma <- sona %>% 
  filter(president_13 == 'Zuma') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 trigrams used by Zuma") +
  theme(plot.title = element_text(size = 11), legend.position = '') +
  scale_fill_gradient(low = "magenta4", high = "plum") 

common_trigram_Motlanthe <- sona %>% 
  filter(president_13 == 'Motlanthe') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 trigrams used by Motlanthe") +
  theme(plot.title = element_text(size = 11), legend.position = '') +
  scale_fill_gradient(low = "darkcyan", high = "paleturquoise") 

common_trigram_Ramaphosa <- sona %>% 
  filter(president_13 == 'Ramaphosa') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 trigrams used by Ramaphosa") +
  theme(plot.title = element_text(size = 11), legend.position = '') +
  scale_fill_gradient(low = "darkgreen", high = "darkseagreen1")



```

@fig-C conveys more meaningful information as we are now dealing with the top 20 trigrams per president. Mandela's trigrams clearly indicated the challenges and priorities, he was dealing at his time of presidency. Without re-emphasising on the trigrams, here's a brief overiew. Mandela's commitment to address social issues, improving public services, maintaining law and order, promoting workers' rights, and ensuring a strong constitutional framework has not gone unnoticed. Once again, his presidency was characterized by a focus on reconciliation and inclusivity, as well as engagement with international matters. Overall, Mandela's presidency was marked by his dedication to nation-building, social progress, and upholding democratic values. Due to the fact that deKlerk was only a 1-term president, all his top words had only a count of 1. Once again, the word constitution appeared multiple times. Indeed, he was dealing with a period of significant political transformation in South Africa. He was therefore working on constitutional negotiations, peace-building, and addressing political and social challenges. His presidency was marked by efforts to move away from apartheid policies and towards a more inclusive and democratic system. Mbeki's top tier words looked quite diverse. He appeared to address issues related to security, governance, economic development, and education. Moreover, the focus on major sporting events like the soccer world cup suggested a commitment to the country's international standing and promoting sports. Additionally, the reference to traditional leadership and community centres indicated engagement with South Africa's cultural and local governance dynamics. As per the top 20 trigrams for Zuma, he seemed to have focused on economic policies, infrastructure development, and addressing corruption. Apart from the social and economic programs, he had to host the 2010 FIFA world cup during his tenure. Motlanthe's trigrams was not that helpful as he was also only a 1-term president. His top 20 trigrams did not convey meaningful information. The only observation was that it appeared that he may have been dealing with a range of complex challenges, with a focus on social and economic development, justice and anti-corruption. Ramaphosa's trigrams sounded very promising and he seemed to have focused on addressing a wide range of issues, including social challenges like gender-based violence, economic development through trade and job creation, legal and constitutional matters, and engagement with various communities and organizations. His governance reflects a multifaceted approach with policy-making aimed at addressing both immediate and long-term challenges facing South Africa. An observation was made that across the trigrams per president, criminal justice system has appeared various time, which also means that crime is still a persistent problem in South Africa.

```{r fig-C, message=FALSE, warning=FALSE, results='hide', echo=FALSE, fig.align='center', fig.cap="Top 20 trio of words (trigrams) used by each president. **A** relates to Mandela's trigrams, **B** relates to deKlerk's trigrams, **C** relates to Mbeki's trigrams, **D** relates to Zuma's trigrams, **E** relates to Motlanthe's trigrams, and **F** relates to Ramaphosa's trigrams.", fig.width = 10, fig.height = 10}
# combining above plots in one figure
cowplot::plot_grid(common_trigram_Mandela, common_trigram_deKlerk,
                   common_trigram_Mbeki, common_trigram_Zuma,
                   common_trigram_Motlanthe, common_trigram_Ramaphosa,
                   nrow = 3, ncol = 2, labels = "AUTO", label_size = 10, label_x = 0) +
  theme(plot.background = element_rect(color = "black", linewidth = 2))
```

## Sentiment Analysis

```{r Top 20 positive/negative words used by all presidents, message=FALSE, warning=FALSE, results='hide', echo=FALSE}
# Most common positive words used by all presidents -----------------------
overall_common_positive_words <- sona %>% 
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  filter(bing_sentiment == 'positive') %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 positive words used by all presidents") +
  theme(plot.title = element_text(size = 11), legend.position = '')+
  scale_fill_gradient(low = "springgreen", high = "darkseagreen1")
  
# Most common negative words used by all presidents -----------------------
overall_common_negative_words <- sona %>% 
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  filter(bing_sentiment == 'negative') %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 negative words used by all presidents") +
  theme(plot.title = element_text(size = 11), legend.position = '')+
  scale_fill_gradient(low = "red", high = "pink")




```

@fig-D...

```{r fig-D, message=FALSE, warning=FALSE, results='hide', echo=FALSE, fig.align='center', fig.cap="Top 20 positive (**A**) and negative (**B**) words used by all presidents.", fig.width = 10}
# combining above plots in one figure
cowplot::plot_grid(overall_common_positive_words, overall_common_negative_words,
                   nrow = 1, ncol = 2, labels = "AUTO", label_size = 10, label_x = 0)+
  theme(plot.background = element_rect(color = "black", linewidth = 2))
```

```{r Top 20 positive words used by each of the presidents, message=FALSE, warning=FALSE, results='hide', echo=FALSE}
# Most common positive words used per president ---------------------------
common_positive_words_Mandela <- sona %>% 
  filter(president_13 == 'Mandela') %>%
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  filter(bing_sentiment == 'positive') %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 positive words used by Mandela") +
  theme(plot.title = element_text(size = 11), legend.position = '')+
  scale_fill_gradient(low = "deeppink3", high = "pink")

common_positive_words_deKlerk <- sona %>% 
  filter(president_13 == 'deKlerk') %>%
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  filter(bing_sentiment == 'positive') %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 positive words used by deKlerk") +
  theme(plot.title = element_text(size = 11), legend.position = '')+
  scale_fill_gradient(low = "chocolate", high = "burlywood1")


common_positive_words_Mbeki <- sona %>% 
  filter(president_13 == 'Mbeki') %>%
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  filter(bing_sentiment == 'positive') %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 positive words used by Mbeki") +
  theme(plot.title = element_text(size = 11), legend.position = '')

common_positive_words_Zuma <- sona %>% 
  filter(president_13 == 'Zuma') %>%
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  filter(bing_sentiment == 'positive') %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 positive words used by Zuma") +
  theme(plot.title = element_text(size = 11), legend.position = '') +
  scale_fill_gradient(low = "magenta4", high = "plum") 

common_positive_words_Motlanthe <- sona %>% 
  filter(president_13 == 'Motlanthe') %>%
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  filter(bing_sentiment == 'positive') %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 positive words used by Motlanthe") +
  theme(plot.title = element_text(size = 11), legend.position = '')+
  scale_fill_gradient(low = "darkcyan", high = "paleturquoise") 

common_positive_words_Ramaphosa <- sona %>% 
  filter(president_13 == 'Ramaphosa') %>%
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  filter(bing_sentiment == 'positive') %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 positive words used by Ramaphosa") +
  theme(plot.title = element_text(size = 11), legend.position = '')  +
  scale_fill_gradient(low = "darkgreen", high = "darkseagreen1")

```

@fig-E...

```{r fig-E, message=FALSE, warning=FALSE, results='hide', echo=FALSE, fig.align='center', fig.cap="Top 20 positive words used by each president. **A** relates to Mandela's positive words, **B** relates to deKlerk's positive words, **C** relates to Mbeki's positive words, **D** relates to Zuma's positive words, **E** relates to Motlanthe's positive words, and **F** relates to Ramaphosa's positive words.", fig.width = 10, fig.height = 10}
# combining above plots in one figure
cowplot::plot_grid(common_positive_words_Mandela, common_positive_words_deKlerk,
                   common_positive_words_Mbeki, common_positive_words_Zuma,
                   common_positive_words_Motlanthe, common_positive_words_Ramaphosa,
                   nrow = 3, ncol = 2, labels = "AUTO", label_size = 10, label_x = 0)+
  theme(plot.background = element_rect(color = "black", linewidth = 2))
```

```{r Top 20 negative words used by each of the presidents, message=FALSE, warning=FALSE, results='hide', echo=FALSE}
# Most common negative words used per president ---------------------------
common_negative_words_Mandela <- sona %>% 
  filter(president_13 == 'Mandela') %>%
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  filter(bing_sentiment == 'negative') %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 negative words used by Mandela") +
  theme(plot.title = element_text(size = 11), legend.position = '')+
  scale_fill_gradient(low = "deeppink3", high = "pink")

common_negative_words_deKlerk <- sona %>% 
  filter(president_13 == 'deKlerk') %>%
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  filter(bing_sentiment == 'negative') %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 negative words used by deKlerk") +
  theme(plot.title = element_text(size = 11), legend.position = '')+
  scale_fill_gradient(low = "chocolate", high = "burlywood1")

common_negative_words_Mbeki <- sona %>% 
  filter(president_13 == 'Mbeki') %>%
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  filter(bing_sentiment == 'negative') %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 negative words used by Mbeki") +
  theme(plot.title = element_text(size = 11), legend.position = '')


common_negative_words_Zuma <- sona %>% 
  filter(president_13 == 'Zuma') %>%
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  filter(bing_sentiment == 'negative') %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 negative words used by Zuma") +
  theme(plot.title = element_text(size = 11), legend.position = '') +
  scale_fill_gradient(low = "magenta4", high = "plum") 

common_negative_words_Motlanthe <- sona %>% 
  filter(president_13 == 'Motlanthe') %>%
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  filter(bing_sentiment == 'negative') %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 negative words used by Motlanthe") +
  theme(plot.title = element_text(size = 11), legend.position = '') +
  scale_fill_gradient(low = "darkcyan", high = "paleturquoise") 


common_negative_words_Ramaphosa <- sona %>% 
  filter(president_13 == 'Ramaphosa') %>%
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  filter(bing_sentiment == 'negative') %>%
  count(word, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(word, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 negative words used by Ramaphosa") +
  theme(plot.title = element_text(size = 11), legend.position = '')  +
  scale_fill_gradient(low = "darkgreen", high = "darkseagreen1")

```

@fig-F...

```{r fig-F, message=FALSE, warning=FALSE, results='hide', echo=FALSE, fig.align='center', fig.cap="Top 20 negative words used by each president. **A** relates to Mandela's negative words, **B** relates to deKlerk's negative words, **C** relates to Mbeki's negative words, **D** relates to Zuma's negative words, **E** relates to Motlanthe's negative words, and **F** relates to Ramaphosa's negative words.", fig.width = 10, fig.height = 10}
# combining above plots in one figure
cowplot::plot_grid(common_negative_words_Mandela, common_negative_words_deKlerk,
                   common_negative_words_Mbeki, common_negative_words_Zuma,
                   common_negative_words_Motlanthe, common_negative_words_Ramaphosa,
                   nrow = 3, ncol = 2, labels = "AUTO", label_size = 10, label_x = 0)+
  theme(plot.background = element_rect(color = "black", linewidth = 2))
```

```{r positive and negative words sentiment over time, message=FALSE, warning=FALSE, results='hide', echo=FALSE}
# Overall change in word sentiment over time ------------------------------

overall_word_bing_sentiment_change_over_time <- sona %>% 
  filter(!president_13 %in% c('deKlerk', 'Motlanthe')) %>% # excluding 1 time president
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  group_by(bing_sentiment, year) %>%
  tally() %>%
  pivot_wider(names_from = 'bing_sentiment', values_from = n, values_fill = 0) %>%
  mutate(bing_sentiment_pos_minus_neg = positive - negative) %>%
  ggplot(aes(x = year, y = bing_sentiment_pos_minus_neg)) + 
  geom_col(fill = 'springgreen') + 
  geom_col(data=. %>% filter(bing_sentiment_pos_minus_neg<0), fill = 'red') +
  xlab('Year') + ylab('Sentiment') +
  theme(plot.title = element_text(size = 11)) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  geom_rect(aes(xmin = 1 - 0.5, xmax = 6 + 0.5, ymin = -5, ymax = 103),
            fill = "transparent", color = "deeppink3", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=1.2, y= 7+103, label="Mandela", colour="deeppink3", size = 3) +
  geom_rect(aes(xmin = 7 - 0.5, xmax = 15 + 0.5, ymin = 0, ymax = 183),
            fill = "transparent", color = "steelblue", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=7, y= 7+183, label="Mbeki", colour="steelblue", size = 3) +
  geom_rect(aes(xmin = 16 - 0.5, xmax = 24 + 0.5, ymin = 0, ymax = 110),
            fill = "transparent", color = "magenta4", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=16, y=7+110, label="Zuma", colour="magenta4", size = 3) +
  geom_rect(aes(xmin = 25 - 0.5, xmax = 30 + 0.5, ymin = 0, ymax = 215),
            fill = "transparent", color = "darkgreen", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=25.2+.3, y=7+215, label="Ramaphosa",colour="darkgreen", size = 3) 
  
  
overall_pos_neg_fluctuation <- sona %>% 
  filter(!president_13 %in% c('deKlerk', 'Motlanthe')) %>% # excluding 1 time president
  unnest_tokens(word, speech, token = 'words') %>%
  filter(str_detect(word, '[a-z]')) %>% 
  filter(!word %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word)) %>%
  left_join(bing, by = 'word') %>%
  rename(bing_sentiment = sentiment) %>%
  mutate(bing_sentiment = ifelse(is.na(bing_sentiment), 'neutral', bing_sentiment)) %>%
  group_by(bing_sentiment, year) %>%
  tally() %>%
  filter(bing_sentiment != 'neutral') %>%
  ggplot(aes(x = year, y = n, colour = bing_sentiment, group = bing_sentiment)) + 
  geom_line() +
  scale_colour_manual(values = c("positive" = "springgreen", "negative" = "red")) +
  geom_smooth(linewidth = 0.2, alpha = 0.2, level = 0.6) +
  ylab('Count') +
  xlab('Year') +
  theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = 'bottom') +
  labs(colour = '') +
  geom_rect(aes(xmin = 1 , xmax = 6 , ymin = 0, ymax = 460),
            fill = "transparent", color = "deeppink3", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=1.7, y=20+460, label="Mandela",color="deeppink3", size = 3) +
  geom_rect(aes(xmin = 7 , xmax = 15 , ymin = 0, ymax = 390),
            fill = "transparent", color = "steelblue", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=7+.5, y=20+390, label="Mbeki",color="steelblue", size = 3) +
  geom_rect(aes(xmin = 16, xmax = 24, ymin = 0, ymax = 300),
            fill = "transparent", color = "magenta4", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=16+.5, y=20+300, label="Zuma",color="magenta4", size = 3) +
  geom_rect(aes(xmin = 25, xmax = 30, ymin = 0, ymax = 560),
            fill = "transparent", color = "darkgreen", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=26, y=20+560, label="Ramaphosa",color="darkgreen", size = 3) 
  
```

@fig-G...

```{r fig-G, message=FALSE, warning=FALSE, results='hide', echo=FALSE, fig.align='center', fig.cap=" Positive and negative words sentiment over time (excluding 1-term presidents such as deKlerk and Motlanthe). **A** corresponds to how many more positive than negative words (or vice versa) computed over the years [1994-2023]. So, the y-axis for **A** was calculated as *Sentiment = positive words - negative words*. **B** refers to the actual count of positive and negative words throughout the same mentioned period. The bounding boxes indicate which part of this timeline belongs to the presidency period of Mandela, Mbeki, Zuma and Ramaphosa.", fig.width = 10, fig.height = 7}

# combining above plots in one figure
cowplot::plot_grid(overall_word_bing_sentiment_change_over_time, overall_pos_neg_fluctuation,
                   nrow = 2, ncol = 1, labels = "AUTO", label_size = 10, label_x = 0)+
  theme(plot.background = element_rect(color = "black", linewidth = 2))
```



```{r Top 20 positive/negative trigrams used by all presidents, message=FALSE, warning=FALSE, results='hide', echo=FALSE}
# Most common positive trigrams used by all presidents --------------------
# redefining bing dictionary and force the word 'anti' to be positive.
bing_word1 <- bing %>%
  mutate(word1 = word) %>% 
  add_row(sentiment = 'positive', word1 = 'anti') %>%
  dplyr::select(-1)
bing_word2 <- bing %>%
  mutate(word2 = word) %>% 
  add_row(sentiment = 'positive', word2 = 'anti') %>%
  dplyr::select(-1)
bing_word3 <- bing %>%
  mutate(word3 = word) %>% 
  add_row(sentiment = 'positive', word3 = 'anti') %>%
  dplyr::select(-1)

overall_common_positive_trigrams <- sona %>% 
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  filter(bing_sentiment == 'positive') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 positive trigrams used by all presidents") +
  theme(plot.title = element_text(size = 10), legend.position = '')+
  scale_fill_gradient(low = "springgreen", high = "darkseagreen1")



overall_common_negative_trigrams <- sona %>% 
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  filter(bing_sentiment == 'negative') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 negative trigrams used by all presidents") +
  theme(plot.title = element_text(size = 10), legend.position = '')+
  scale_fill_gradient(low = "red", high = "pink")
```

Plot **A** of @fig-H is a typical example of the presidents trying to improve the well-being of the local population, especially those who live in informal settlements suffering from basic amenities. So, the positive trigrams highlighted a range of policy areas, projects and achievements, including social welfare, economic development, public services, infrastructure, and international engagement. 

For plot **B**, there were several words like gross domestic product, crime prevention strategy, sexual offence court, prosecute authority npa, sexual office unit, passenger rail agency, gross fix capital, fight organise crime, emergency task team, corruption task team, and corruption advisory council which should not have been categorised as negative sentiment. Nevertheless, the problem for crime seemed persistent which was why a criminal justice system needed refinement. Although the criminal justice system is a positive sentiment, we treated it as negative because if there were no crimes, it would be pointless to have a criminal justice system. So, its existence entailed the unsolved problem of crime in the country. In fact, the same logic could be argued with regards to sexual offence court.

```{r fig-H, message=FALSE, warning=FALSE, results='hide', echo=FALSE, fig.align='center', fig.cap="Top 20 positive (**A**) and negative (**B**) trio of words (trigrams) used by all presidents.", fig.width = 10}

# combining above plots in one figure
cowplot::plot_grid(overall_common_positive_trigrams, overall_common_negative_trigrams,
                   nrow = 1, ncol = 2, labels = "AUTO", label_size = 10, label_x = 0)+
  theme(plot.background = element_rect(color = "black", linewidth = 2))

```

```{r Top 20 positive trigrams used by each of the presidents, message=FALSE, warning=FALSE, results='hide', echo=FALSE}
# Most common positive trigrams used per president ------------------------
Mandela_common_positive_trigrams <- sona %>% 
  filter(president_13 == 'Mandela') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  filter(bing_sentiment == 'positive') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 positive trigrams used by Mandela") +
  theme(plot.title = element_text(size = 9), legend.position = '') +
  scale_fill_gradient(low = "deeppink3", high = "pink")


deKlerk_common_positive_trigrams <- sona %>% 
  filter(president_13 == 'deKlerk') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  filter(bing_sentiment == 'positive') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("The only 9 positive trigrams used by deKlerk") +
  theme(plot.title = element_text(size = 9), legend.position = '') +
  scale_fill_gradient(low = "chocolate", high = "burlywood1")


Mbeki_common_positive_trigrams <- sona %>% 
  filter(president_13 == 'Mbeki') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  filter(bing_sentiment == 'positive') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 positive trigrams used by Mbeki") +
  theme(plot.title = element_text(size = 9), legend.position = '')

Zuma_common_positive_trigrams <- sona %>% 
  filter(president_13 == 'Zuma') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  filter(bing_sentiment == 'positive') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 positive trigrams used by Zuma") +
  theme(plot.title = element_text(size = 9), legend.position = '') +
  scale_fill_gradient(low = "magenta4", high = "plum")

Motlanthe_common_positive_trigrams <- sona %>% 
  filter(president_13 == 'Motlanthe') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  filter(bing_sentiment == 'positive') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 positive trigrams used by Motlanthe") +
  theme(plot.title = element_text(size = 9), legend.position = '') +
  scale_fill_gradient(low = "darkcyan", high = "paleturquoise")



Ramaphosa_common_positive_trigrams <- sona %>% 
  filter(president_13 == 'Ramaphosa') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  filter(bing_sentiment == 'positive') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 positive trigrams used by Ramaphosa") +
  theme(plot.title = element_text(size = 9), legend.position = '') +
  scale_fill_gradient(low = "springgreen", high = "darkseagreen1")



```

@fig-I depicts the positive sentiment of trigrams per president. Mandela's positive sentiment focused on social welfare, economic development, social justice, reconciliation, and peace. He worked to create a more inclusive and just society while addressing a range of challenges, both domestic and international. He wanted to promote black empowerment as he was fighting for the abolition of apartheid. So, Mandela's commitment to building a post-apartheid South Africa that was democratic, equitable, and prosperous is still engraved in our heart. His main priority seemed to be the provision for free medical care. Since deKlerk was only a 1-term president, only 9 unique positive trigrams were obtained. His focus on building trust, finding practical solutions, and ensuring genuine autonomy and constitutional safeguards indicated a commitment to resolving issues related to apartheid, political reform, and peace-building. It was consistent with his role in initiating negotiations to end apartheid and lead South Africa towards a more inclusive and democratic future. The top 20 positive sentiment trigrams for Mbeki was focused on infrastructure and basic amenities development, social welfare, economic growth, and international cooperation (i.e, afro-asian solidarity). He definitely tried to promote unity and solidarity in South Africa. Zuma's positive sentiment trigrams showcased an all-rounded presidency with a focus on social welfare, diplomacy, economic development, public health, and governance. The positive sentiment trigrams from Motlanthe also being a 1-term president aimed to address a range of issues, including economic growth, social welfare, competitiveness, equitable development, and infrastructure improvement. His administration appeared to have focused on creating a more inclusive and socially responsible society, with an emphasis on social support, economic stability, and equitable access to healthcare. It was no surprise to see that continental free trade was the first positive sentiment trigram for Ramaphosa, as he is always very business-oriented. He was really dedicated to economic growth, social inclusivity, diplomacy, democratic governance, and addressing pressing issues such as land reform and healthcare. He seemed to also focus on collaborative efforts and comprehensive planning to address the nation's challenges and drive progress. Overall, it was observed that most presidents were promoting child support grant and free basic amenities and clean water.

```{r fig-I, message=FALSE, warning=FALSE, results='hide', echo=FALSE, fig.align='center', fig.cap="Top 20 positive trio of words (trigrams) used by each president. **A** relates to Mandela's positive trigrams, **B** relates to deKlerk's positive trigrams, **C** relates to Mbeki's positive trigrams, **D** relates to Zuma's positive trigrams, **E** relates to Motlanthe's positive trigrams, and **F** relates to Ramaphosa's positive trigrams.", fig.width = 10, fig.height = 10}
# combining above plots in one figure
cowplot::plot_grid(Mandela_common_positive_trigrams, deKlerk_common_positive_trigrams,
                   Mbeki_common_positive_trigrams, Zuma_common_positive_trigrams,
                   Motlanthe_common_positive_trigrams, Ramaphosa_common_positive_trigrams,
                   nrow = 3, ncol = 2, labels = "AUTO", label_size = 10, label_x = 0)+
  theme(plot.background = element_rect(color = "black", linewidth = 2))
```

```{r Top 20 negative trigrams used by each of the presidents, message=FALSE, warning=FALSE, results='hide', echo=FALSE}
# Most common negative trigrams used per president ------------------------

Mandela_common_negative_trigrams <- sona %>% 
  filter(president_13 == 'Mandela') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  filter(bing_sentiment == 'negative') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 negative trigrams used by Mandela") +
  theme(plot.title = element_text(size = 9), legend.position = '') +
  scale_fill_gradient(low = "deeppink3", high = "pink")


deKlerk_common_negative_trigrams <- sona %>% 
  filter(president_13 == 'deKlerk') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  filter(bing_sentiment == 'negative') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("The only 5 negative trigrams used by deKlerk") +
  theme(plot.title = element_text(size = 9), legend.position = '') +
  scale_fill_gradient(low = "chocolate", high = "burlywood1")


Mbeki_common_negative_trigrams <- sona %>% 
  filter(president_13 == 'Mbeki') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  filter(bing_sentiment == 'negative') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 negative trigrams used by Mbeki") +
  theme(plot.title = element_text(size = 9), legend.position = '')

Zuma_common_negative_trigrams <- sona %>% 
  filter(president_13 == 'Zuma') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  filter(bing_sentiment == 'negative') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 negative trigrams used by Zuma") +
  theme(plot.title = element_text(size = 9), legend.position = '') +
  scale_fill_gradient(low = "magenta4", high = "plum")


Motlanthe_common_negative_trigrams <- sona %>% 
  filter(president_13 == 'Motlanthe') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  filter(bing_sentiment == 'negative') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("The only 18 negative trigrams used by Motlanthe") +
  theme(plot.title = element_text(size = 9), legend.position = '') +
  scale_fill_gradient(low = "darkcyan", high = "paleturquoise")


Ramaphosa_common_negative_trigrams <- sona %>% 
  filter(president_13 == 'Ramaphosa') %>%
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  filter(bing_sentiment == 'negative') %>%
  count(trigram, sort = T) %>%
  slice(1:20) %>%
  #filter(rank(desc(n)) <= 20) %>%
  ggplot(aes(x = reorder(trigram, n), y = n, fill = -n)) + geom_col() + coord_flip() + ylab('Count') + xlab('') +
  ggtitle("Top 20 negative trigrams used by Ramaphosa") +
  theme(plot.title = element_text(size = 9), legend.position = '') +
  scale_fill_gradient(low = "springgreen", high = "darkseagreen1")
```

@fig-J illustrates the negative sentiment of trigrams per president. Mandela's presidency emphasised on inclusivity, human rights and social justice as mentioned before. During his time, he unfortunately had to deal with significant challenges, such as crime, corruption, land issues, child abuse and rape, poverty, and environmental concerns. The top 2 sentiments were rather positive, but crime related. Due to deKlerk being a 1-term president, he had only 5 unique negative sentiments trigrams which did not really convey much information apart from words like hopeless, hard negotiation, threaten, conflict and difficulty which only highlighted some challenges and hardships during his presidency without any specific context. Ignoring the trigrams which were supposed to have strictly positive sentiments like gross domestic product and post conflict reconstruction; the crime related matter kept on persisting with some other social matters, public health issues and other political challenges. Again, ignoring gross domestic product being a positive sentiment trigram, the crime issue were on top of the list during Zuma's presidency. Furthermore, he had to deal with corruption, economic challenges, infrastructural breakdown, and some social and environmental concerns. Motlanthe's was also a 1-term president and from the trigrams, "poverty decline substantially", "metric poverty decline", "input price decline", "hungry decline dramatically", "gross fix capital" and "gross domestic product" should be ignored and treated as positive sentiment. This was a good example of the disadvantages of using lexicon-dictionary based approach for sentiment analysis. Nevertheless, crime, inequality, security measure issue, economic issues, political challenges and illicit activities were still the major concerns during his presidency. We again see some false negative sentiment present in the trigrams for Ramaphosa. Ignoring those, he still had to deal with crime related issues, violence in public, poverty, insanitation, water shortage, drug trafficking, debt perhaps due to the global pandemic which he also mentioned. It was quite clear that throughout all these year the crime issues, poverty, and violence were not able to eradicate or at a bare minimum to mitigate.


```{r fig-J, message=FALSE, warning=FALSE, results='hide', echo=FALSE, fig.align='center', fig.cap="Top 20 negative trio of words (trigrams) used by each president. **A** relates to Mandela's negative trigrams, **B** relates to deKlerk's negative trigrams, **C** relates to Mbeki's negative trigrams, **D** relates to Zuma's negative trigrams, **E** relates to Motlanthe's negative trigrams, and **F** relates to Ramaphosa's negative trigrams.", fig.width = 10, fig.height = 10}
# combining above plots in one figure
cowplot::plot_grid(Mandela_common_negative_trigrams, deKlerk_common_negative_trigrams,
                   Mbeki_common_negative_trigrams, Zuma_common_negative_trigrams,
                   Motlanthe_common_negative_trigrams, Ramaphosa_common_negative_trigrams,
                   nrow = 3, ncol = 2, labels = "AUTO", label_size = 10, label_x = 0)+
  theme(plot.background = element_rect(color = "black", linewidth = 2))
```

```{r positive and negative trigrams sentiment over time, message=FALSE, warning=FALSE, results='hide', echo=FALSE}
# Overall change in trigram sentiment over time ---------------------------

overall_trigram_bing_sentiment_change_over_time <- sona %>% 
  filter(!president_13 %in% c('deKlerk', 'Motlanthe')) %>% # excluding 1 time president
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  group_by(bing_sentiment, year) %>%
  tally() %>%
  pivot_wider(names_from = 'bing_sentiment', values_from = n, values_fill = 0) %>%
  mutate(bing_sentiment_pos_minus_neg = positive - negative) %>%
  ggplot(aes(x = year, y = bing_sentiment_pos_minus_neg)) + 
  geom_col(fill = 'springgreen') + 
  geom_col(data=. %>% filter(bing_sentiment_pos_minus_neg<0), fill = 'red') +
  xlab('Year') + ylab('Sentiment') +
  theme(plot.title = element_text(size = 11)) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  geom_rect(aes(xmin = 1 - 0.5, xmax = 6 + 0.5, ymin = 0, ymax = 16),
            fill = "transparent", color = "deeppink3", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=1.15, y= 3+16, label="Mandela",color="deeppink3", size = 3) +
  geom_rect(aes(xmin = 7 - 0.5, xmax = 15 + 0.5, ymin = -12, ymax = 25),
            fill = "transparent", color = "steelblue", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=7, y= 3+25, label="Mbeki",color="steelblue", size = 3) +
  geom_rect(aes(xmin = 16 - 0.5, xmax = 24 + 0.5, ymin = 0, ymax = 40),
            fill = "transparent", color = "magenta4", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=16, y=3+40, label="Zuma",color="magenta4", size = 3) +
  geom_rect(aes(xmin = 25 - 0.5, xmax = 30 + 0.5, ymin = 0, ymax = 85),
            fill = "transparent", color = "darkgreen", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=25+.3, y=3+85, label="Ramaphosa",color="darkgreen", size = 3) 


overall_pos_neg_trigram_fluctuation <- sona %>% 
  filter(!president_13 %in% c('deKlerk', 'Motlanthe')) %>% # excluding 1 time president
  unnest_tokens(trigram, speech, token = 'ngrams', n=3) %>%
  separate(trigram, c('word1', 'word2', 'word3'), sep = ' ') %>%
  filter(str_detect(word1, '[a-z]'), str_detect(word2, '[a-z]'), str_detect(word3, '[a-z]')) %>%
  filter(!word1 %in% stop_words$word & !word2 %in% stop_words$word & !word3 %in% stop_words$word) %>%
  left_join(bing_word1, by = 'word1') %>% rename(bing_sentiment1 = sentiment) %>%
  left_join(bing_word2, by = 'word2') %>% rename(bing_sentiment2 = sentiment) %>%
  left_join(bing_word3, by = 'word3') %>% rename(bing_sentiment3 = sentiment) %>%
  filter(!grepl(common_sona_reg, word1)) %>%
  filter(!grepl(common_sona_reg, word2)) %>%
  filter(!grepl(common_sona_reg, word3)) %>%
  unite(trigram, word1, word2, word3, sep = ' ') %>%
  mutate(bing_sentiment1 = ifelse(is.na(bing_sentiment1), 'neutral', bing_sentiment1)) %>%
  mutate(bing_sentiment2 = ifelse(is.na(bing_sentiment2), 'neutral', bing_sentiment2)) %>%
  mutate(bing_sentiment3 = ifelse(is.na(bing_sentiment3), 'neutral', bing_sentiment3)) %>%
  mutate(bing_sentiment1_score = case_when(bing_sentiment1 == 'neutral' ~ 0,
                                           bing_sentiment1 == 'positive' ~ 1,
                                           bing_sentiment1 == 'negative' ~ -1),
         bing_sentiment2_score = case_when(bing_sentiment2 == 'neutral' ~ 0,
                                           bing_sentiment2 == 'positive' ~ 1,
                                           bing_sentiment2 == 'negative' ~ -1),
         bing_sentiment3_score = case_when(bing_sentiment3 == 'neutral' ~ 0,
                                           bing_sentiment3 == 'positive' ~ 1,
                                           bing_sentiment3 == 'negative' ~ -1),
         bing_sentiment_finalscore = bing_sentiment1_score +bing_sentiment2_score+bing_sentiment3_score,
         bing_sentiment = case_when(bing_sentiment_finalscore == 0 ~ 'neutral',
                                    bing_sentiment_finalscore >= 1 ~ 'positive',
                                    bing_sentiment_finalscore <  1 ~ 'negative')) %>%
  group_by(bing_sentiment, year) %>%
  tally() %>%
  filter(bing_sentiment != 'neutral') %>%
  ggplot(aes(x = year, y = n, colour = bing_sentiment, group = bing_sentiment)) + 
  geom_line() +
  scale_colour_manual(values = c("positive" = "springgreen", "negative" = "red")) +
  geom_smooth(linewidth = 0.2, alpha = 0.2, level = 0.6) +
  ylab('Count') +
  xlab('Year') +
  theme(axis.text.x = element_text(angle = 90, hjust = 1), legend.position = 'bottom') +
  labs(color = '') +
  geom_rect(aes(xmin = 1 , xmax = 6 , ymin = 0, ymax = 55),
            fill = "transparent", color = "deeppink3", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=1+.5, y=7+55, label="Mandela",color="deeppink3", size = 3) +
  geom_rect(aes(xmin = 7 , xmax = 15 , ymin = 0, ymax = 55),
            fill = "transparent", color = "steelblue", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=7+.5, y=7+55, label="Mbeki",color="steelblue", size = 3) +
  geom_rect(aes(xmin = 16, xmax = 24, ymin = 0, ymax = 75),
            fill = "transparent", color = "magenta4", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=16+.5, y=7+75, label="Zuma",color="magenta4", size = 3) +
  geom_rect(aes(xmin = 25, xmax = 30, ymin = 0, ymax = 150),
            fill = "transparent", color = "darkgreen", size = .05, linetype = '8f') + ggplot2::annotate(geom="text", x=25+.8, y=7+150, label="Ramaphosa",color="darkgreen", size = 3) 

```

So, when we investigated the sentiment over the years from @fig-K, we noticed that plot **A** had always more positive than negative sentiment and has increased over the years. Except that during Mbeki's presidency in 2001, the negative sentiment for the trigrams surpassed the positive ones, perhaps because of the rise in HIV/AIDS in South Africa. Plot **B** shows the fluctuation in count of positive and negative sentiment throughout the years. It is worth noting that the positive sentiments were larger than the negative sentiments. Consider the positive sentiment, the fluctuations occurrences indicates the positive sentiment count in the previous year tend to be higher than the following year relative to the previous year. This means that the presidents were hopeful for country to implement the project as planned, however, in the following year they always have to deal with some societal or economic challenges which caused the drop in the positive sentiment. This observation was supported in @miranda2021exploring as well, meaning that in general that tends to be the case. Another interesting observation was that whenever there was a peak in negative sentiment, logically we would guess a drop in positive sentiment below the negative sentiment (i.e, more negative sentiment than positive sentiment). However, whenever the negative sentiment was very high, the positive sentiment also increased. That means whenever there's something bad happening, the politicians tend to cover it up with good or positive speeched to decrease tension and mask the actuality. Moreoverm the trends between the positive and negative sentiment had increased over the years and the sudden drop in positive and negative sentiment in 2020 was due to the global pandemic covid-19. So, as a final observation, it seemed as if over the years the South African presidents were improved and did better with an increasing trend in positive sentiment.


```{r fig-K, message=FALSE, warning=FALSE, results='hide', echo=FALSE, fig.align='center', fig.cap=" Positive and negative trio of words (trigrams) sentiment over time (excluding 1-term presidents such as deKlerk and Motlanthe). **A** corresponds to how many more positive than negative trigrams (or vice versa) computed over the years [1994-2023]. So, the y-axis for **A** was calculated as *Sentiment = positive trigrams - negative trigrams*. **B** refers to the actual count of positive and negative trigrams throughout the same mentioned period. The bounding boxes indicate which part of this timeline belongs to the presidency period of Mandela, Mbeki, Zuma and Ramaphosa.", fig.width = 10, fig.height = 7}
# combining above plots in one figure
cowplot::plot_grid(overall_trigram_bing_sentiment_change_over_time, overall_pos_neg_trigram_fluctuation,
                   nrow = 2, ncol = 1, labels = "AUTO", label_size = 10, label_x = 0)

```

## Topic Modelling

*Steve's section*

# Conclusion

.....

\newpage

# References
