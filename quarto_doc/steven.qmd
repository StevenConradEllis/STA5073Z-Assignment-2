---
author:
  - name: Ropafadzo Chimuti
    email: CHMROP002@myuct.ac.za
  - name: Tanweer Nujjoo
    email: NJJSYE001@myuct.ac.za
  - name: Steven Ellis
    email: ELLSTE005@uct.ac.za
        
title: A Descriptive Analysis of Presidential SONA Addresses in South Africa - 1994 to 2023
keywords: SONA, text modelling, sentiment analysis, latent Dirichlet allocation, LDA, bag-of-words
abstract: |
  Summary of motivation and outcome. Start with context, task and object, finish with findings and conclusion. This is written last.
bibliography: bibliography-steven.bib
format:
  acs-html: default
  acs-pdf:
    journal:
      id: jacsat  #This is an identifier for the target journal: from https://pubs.acs.org/, the identifier is the part of the URL after https://pubs.acs.org/journal/, e.g. for J. Org. Chem. it would be joceah.
      type: article  #article, note, communication, review, letter, or perspectivee
      layout: traditional #traditional or twocolumn, twocolumn currently broken for longtables
      hide-email: false # if enabled, hides email addresses (and fax/phone)
      abbreviations: IR,NMR,UV
  
---

```{r libraries, message=FALSE, warning=FALSE, results='hide', echo=FALSE}
library(stringr)
library(tidyverse)
library(tidytext)
library(textstem)
library(textdata)
library(tm)
library(MASS)
library(topicmodels)
library(knitr)
```


```{r extract, message=FALSE, warning=FALSE, results='hide', echo=FALSE}
set.seed(2023)

# Set working folder to parent folder
WD <- getwd()
if (!is.null(WD)) setwd(WD)
setwd('../') 

# read in text data files and organise these into a data frame
filenames <- c('1994_post_elections_Mandela.txt', 
               '1994_pre_elections_deKlerk.txt', 
               '1995_Mandela.txt', 
               '1996_Mandela.txt', 
               '1997_Mandela.txt',
               '1998_Mandela.txt', 
               '1999_post_elections_Mandela.txt', 
               '1999_pre_elections_Mandela.txt', 
               '2000_Mbeki.txt', 
               '2001_Mbeki.txt', 
               '2002_Mbeki.txt', 
               '2003_Mbeki.txt', 
               '2004_post_elections_Mbeki.txt', 
               '2004_pre_elections_Mbeki.txt', 
               '2005_Mbeki.txt', 
               '2006_Mbeki.txt', 
               '2007_Mbeki.txt', 
               '2008_Mbeki.txt', 
               '2009_post_elections_Zuma.txt', 
               '2009_pre_elections_ Motlanthe.txt', 
               '2010_Zuma.txt', 
               '2011_Zuma.txt', 
               '2012_Zuma.txt', 
               '2013_Zuma.txt', 
               '2014_post_elections_Zuma.txt', 
               '2014_pre_elections_Zuma.txt', 
               '2015_Zuma.txt', 
               '2016_Zuma.txt', 
               '2017_Zuma.txt', 
               '2018_Ramaphosa.txt', 
               '2019_post_elections_Ramaphosa.txt', 
               '2019_pre_elections_Ramaphosa.txt', 
               '2020_Ramaphosa.txt', 
               '2021_Ramaphosa.txt', 
               '2022_Ramaphosa.txt', 
               '2023_Ramaphosa.txt')

this_speech <- c()
this_speech[1] <- readChar('./sona-addresses-1994-2023/1994_post_elections_Mandela.txt', nchars = 27050)
this_speech[2] <- readChar('./sona-addresses-1994-2023/1994_pre_elections_deKlerk.txt', nchars = 12786)
this_speech[3] <- readChar('./sona-addresses-1994-2023/1995_Mandela.txt', nchars = 39019)
this_speech[4] <- readChar('./sona-addresses-1994-2023/1996_Mandela.txt', nchars = 39524)
this_speech[5] <- readChar('./sona-addresses-1994-2023/1997_Mandela.txt', nchars = 37489)
this_speech[6] <- readChar('./sona-addresses-1994-2023/1998_Mandela.txt', nchars = 45247)
this_speech[7] <- readChar('./sona-addresses-1994-2023/1999_post_elections_Mandela.txt', nchars = 34674)
this_speech[8] <- readChar('./sona-addresses-1994-2023/1999_pre_elections_Mandela.txt', nchars = 41225)
this_speech[9] <- readChar('./sona-addresses-1994-2023/2000_Mbeki.txt', nchars = 37552)
this_speech[10] <- readChar('./sona-addresses-1994-2023/2001_Mbeki.txt', nchars = 41719)
this_speech[11] <- readChar('./sona-addresses-1994-2023/2002_Mbeki.txt', nchars = 50544)
this_speech[12] <- readChar('./sona-addresses-1994-2023/2003_Mbeki.txt', nchars = 58284)
this_speech[13] <- readChar('./sona-addresses-1994-2023/2004_post_elections_Mbeki.txt', nchars = 34590)
this_speech[14] <- readChar('./sona-addresses-1994-2023/2004_pre_elections_Mbeki.txt', nchars = 39232)
this_speech[15] <- readChar('./sona-addresses-1994-2023/2005_Mbeki.txt', nchars = 54635)
this_speech[16] <- readChar('./sona-addresses-1994-2023/2006_Mbeki.txt', nchars = 48643)
this_speech[17] <- readChar('./sona-addresses-1994-2023/2007_Mbeki.txt', nchars = 48641)
this_speech[18] <- readChar('./sona-addresses-1994-2023/2008_Mbeki.txt', nchars = 44907)
this_speech[19] <- readChar('./sona-addresses-1994-2023/2009_post_elections_Zuma.txt', nchars = 31101)
this_speech[20] <- readChar('./sona-addresses-1994-2023/2009_pre_elections_Motlanthe.txt', nchars = 47157)
this_speech[21] <- readChar('./sona-addresses-1994-2023/2010_Zuma.txt', nchars = 26384)
this_speech[22] <- readChar('./sona-addresses-1994-2023/2011_Zuma.txt', nchars = 33281)
this_speech[23] <- readChar('./sona-addresses-1994-2023/2012_Zuma.txt', nchars = 33376)
this_speech[24] <- readChar('./sona-addresses-1994-2023/2013_Zuma.txt', nchars = 36006)
this_speech[25] <- readChar('./sona-addresses-1994-2023/2014_post_elections_Zuma.txt', nchars = 29403)
this_speech[26] <- readChar('./sona-addresses-1994-2023/2014_pre_elections_Zuma.txt', nchars = 36233)
this_speech[27] <- readChar('./sona-addresses-1994-2023/2015_Zuma.txt', nchars = 32860)
this_speech[28] <- readChar('./sona-addresses-1994-2023/2016_Zuma.txt', nchars = 32464)
this_speech[29] <- readChar('./sona-addresses-1994-2023/2017_Zuma.txt', nchars = 35981)
this_speech[30] <- readChar('./sona-addresses-1994-2023/2018_Ramaphosa.txt', nchars = 33290)
this_speech[31] <- readChar('./sona-addresses-1994-2023/2019_post_elections_Ramaphosa.txt', nchars = 42112)
this_speech[32] <- readChar('./sona-addresses-1994-2023/2019_pre_elections_Ramaphosa.txt', nchars = 56960)
this_speech[33] <- readChar('./sona-addresses-1994-2023/2020_Ramaphosa.txt', nchars = 47910)
this_speech[34] <- readChar('./sona-addresses-1994-2023/2021_Ramaphosa.txt', nchars = 43352)
this_speech[35] <- readChar('./sona-addresses-1994-2023/2022_Ramaphosa.txt', nchars = 52972)
this_speech[36] <- readChar('./sona-addresses-1994-2023/2023_Ramaphosa.txt', nchars = 53933)

sona <- data.frame(filename = filenames, speech = this_speech, stringsAsFactors = FALSE)
sona$speech_year <- str_sub(sona$filename, start = 1, end = 4)
sona$pres <- str_remove_all(str_extract(sona$filename, "[dA-Z].*\\."), "\\.")

# clean the sona dataset by adding the date and removing unnecessary text
replace_reg <- '(http.*?(\\s|.$))|(www.*?(\\s|.$))|&amp;|&lt;|&gt;|\n'

sona <-sona %>%
  mutate(speech = lemmatize_strings(stringr::str_replace_all(speech, replace_reg , ' '))
         ,date = str_sub(speech, start=1, end=30)
         ,date = str_replace_all(date, "February", "02")
         ,date = str_replace_all(date, "June", "06")
         ,date = str_replace_all(date, "Feb", "02")
         ,date = str_replace_all(date, "May", "05")
         ,date = str_replace_all(date, "Jun", "06")
         ,date = str_replace_all(date, "Thursday, ","")
         ,date = str_replace_all(date, ' ', '-')        
         ,date = str_replace_all(date, "[A-z]",'')
         ,date = str_replace_all(date, '-----', '')
         ,date = str_replace_all(date, '----', '')
         ,date = str_replace_all(date, '---', '')
         ,date = str_replace_all(date, '--', '')
  )

# Convert to tibble
sona <- as.tibble(sona)

```

## Introduction

This is the introduction. To cover: what is `SONA` and what is its purpose? What is topic modelling, sentiment analysis and descriptive analysis etc? What was the assignment task? What was the motivation? Why is modelling important?

## Materials and Methods

### DataSet

Summary of data-set and data cleaning methods used. How the data was read in, parsed.

### Sentiment Analysis

Summary of tools used for sentiment analysis (R packages), how data was pre-processed for sentiment analysis, and techniques used.

### Topic Modelling

```{r lda_all, message=FALSE, warning=FALSE, results='hide', echo=FALSE}

replace_reg <- '(http.*?(\\s|.$))|(www.*?(\\s|.$))|&amp;|&lt;|&gt;'
unnest_reg <- "[^\\w_#@'’]"

# turn into tidy text 
tidy_sona <- sona %>% 
  mutate(speech = str_replace_all(speech, replace_reg, '')) %>% # remove links etx
  unnest_tokens(word, speech, token = 'regex', pattern = unnest_reg) %>%   # tokenize
  filter(!word %in% stop_words$word, str_detect(word, '[A-Za-z]')) %>%  # remove stop words
  dplyr::select(word, pres, date, filename)  # select variables needed

# Count the number of times each word in our vocabulary was used by each president, 
# creating a "long" (and tidy) format of the document-term matrix.
sona_tdf <- tidy_sona %>%
  group_by(pres,word) %>%
  count() %>%  
  ungroup()

# Remove common SONA words that are used very regularly, but which don't convey too much meaning
common_sona_reg <- 'speaker|madame|honourable|chairperson|development|national|ensure|deputy|africa|african|africans|south|southern|government|people|programme|economic|economy|country'
sona_tdf <- sona_tdf %>% filter(!grepl(common_sona_reg, word))

# Create a DocumentTermMatrix object using cast_dtm(), required by the topicmodels package 
# which we will use to implement the LDA topic model
dtm_sona <- sona_tdf %>% cast_dtm(pres, word, n)

# Estimate the parameters of the topic model using LDA
sona_lda <- LDA(dtm_sona, k = 5, control = list(seed = 2023))

# Use the tidy() function by the  tidytext package 
# for extracting the per-topic-per-word probabilities, called β (“beta”), from the model
sona_topics <- tidy(sona_lda, matrix = "beta")

# The model is now in one-topic-per-term-per-row format. 
# For each combination, the model computes the probability of that term 
# being generated from that topic. 

# Use dplyr’s slice_max() to find the 10 terms that are most common within each topic
sona_top_terms <- sona_topics %>%
  group_by(topic) %>%
  slice_max(beta, n = 20) %>% 
  ungroup() %>%
  arrange(topic, -beta)

```

Summary of topic modelling, LDA. Tools used for LDA (R packages), how data was pre-processed for LDA, and techniques used.

## Results

Results introduction

### Sentiment Analysis

### Topic Modelling

Topic modelling is a machine learning technique that scans tokens (usually words) in sequences (usually documents), with the aim of detecting word and phrase patterns within the sequences. This is achieved by clustering word groups and similar expressions together into ‘topics’ that best characterize a set of documents. [@Pascual2019]

Topic models can help offer insights into bodies of text, for better understanding of large collections of unstructured text bodies. [@Blei2012]

In this assignment topic modelling was performed as follows:

From the pre-generated tibble the following commonly-used words were removed from SONA speeches: `speaker, madame, honourable, chairperson, development, national`, `ensure, deputy, africa, african, africans, south, southern`, `government, people, programme, economic, economy, country`

A data-set of terms that appeared in a resulting corpus of speeches was then extracted into a **document-term matrix**, containing rows corresponding to the speeches and columns corresponding to the words.

The **Latent Dirichlet allocation (LDA)** method was then used to extract topics from the sparse and wide document-term matrix. 
The LDA algorithm is guided by two principles:

* Every document is a mixture of *topics* (for example 90% topic A and 10% topic B) and every topic is a mixture of *words*. 
* Every topic is a probability distribution over words.  

LDA draws topic distributions from a Dirichlet distribution and uses variational expectation maximisation algorithm, and collapsed Gibbs sampling (both beyond the scope of this assignment) to achieve topic model estimations.

The **LDA()** function from the `topicmodels` package was used to retrieve LDA topic models.

Latent Dirichlet allocation Topic modelling was performed in the following way:

* The top 5 topics were retrieved across all speeches (to retrieve president-specific topics). 
* The `tidytext` package was then used to extract **per-topic-per-word probabilities** (the "beta") from the model.
* The **per-president-per-topic probabilities** (the "gamma") were then extracted using the `tidytext` package.
* The log ratio of beta values of topics for different presidents were compared to reveal words with the greatest differences between the two presidents' topics.
* Finally, the speeches of Ramaphosa were retrieved, and the same exercise was repeated for Ramaphosa-specific speeches (to gain insights into the topics that permeated his speeches over the years).


```{r lda_graph1, message=FALSE, warning=FALSE, results='hide', echo=FALSE}

# Visualize top terms per topic using ggplot
sona_top_terms %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(beta, term, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  labs(title = "Figure 1 : Top terms per LDA-generated topic - All Presidential Speeches") +
  scale_y_reordered()

```


```{r lda_doc, message=FALSE, warning=FALSE, results='hide', echo=FALSE}

# Examine the per-president-per-topic probabilities, γ (“gamma”), 
# with the matrix = "gamma" argument to tidy()
sona_documents <- tidy(sona_lda, matrix = "gamma")

# Determine which president has the highest gamma score per topic
sona_document_prob <- sona_documents %>%
  group_by(topic) %>%
  slice_max(order_by = round(gamma, 3), n = 1) %>%
  ungroup() %>% 
  mutate(gamma = round(gamma, 3))

colnames(sona_document_prob) <- c("President", "Topic", "Gamma")

# Summarise the topic gamma values, and example words per topic
topic_names <- c("Topic 1", "Topic 2", "Topic 3", "Topic 4", "Topic 5")
topic_presidents <- c("deKlerk", "Mandela", "Mbeki", "Ramaphosa", "Zuma")
topic_words <- c("constitution, change, improve, parliament, create", "nation, build, human, crime, job, address", "system, world, growth, poverty, challenge", "business, investment, build, growth, improve", "compratriot, water, education, community, plan")

sona_topic_summary <- cbind(topic_names, topic_presidents, topic_words)
colnames(sona_topic_summary) <- c("Topic", "President", "Example Words")

```

```{r topic.prob, echo=FALSE}
#| label: tbl-probs
#| tbl-cap: "President-Per-Topic Probabilities"
#| tbl-colwidths: [60,20,20]

# display the president per-topic probabilities
kable(sona_document_prob)
```

From the LDA topic modelling on all speeches, there is a clear probalistic relationship between top 5 topics and which president each topic relates to.

```{r topic.summary, echo=FALSE}
#| label: tbl-topic-summary
#| tbl-cap: "Topic Summaries"
#| tbl-colwidths: [20,20, 60]

kable(sona_topic_summary)
```

### A comparison of word differences between presidents 

The comparison of the log ratio of beta values of different president topics revealed interesting insights into the eras characterizing their tenures, their priorities and the challanges each faced.

```{r lda_beta1, message=FALSE, warning=FALSE, results='hide', echo=FALSE}

# beta comparison of topic 1 and topic 2
beta_wide <- sona_topics %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic1 > .001 | topic2 > .001) %>%
  mutate(log_ratio = log2(topic2 / topic1))

# beta comparison of topic 3 and topic 4
beta_wide2 <- sona_topics %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic3 > .001 | topic4 > .001) %>%
  mutate(log_ratio = log2(topic4 / topic3))

# beta comparison of topic 4 and topic 5
beta_wide3 <- sona_topics %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic4 > .001 | topic5 > .001) %>%
  mutate(log_ratio = log2(topic5 / topic4))

par(mfrow=c(2,2))

# Visualize first beta
beta_wide %>%
  group_by(direction = log_ratio > 0) %>%
  top_n(8, abs(log_ratio)) %>%
  ungroup() %>%
  mutate(term = reorder(term, log_ratio)) %>%
  ggplot(aes(term, log_ratio, fill = "#478ACA")) +
  theme(legend.position = "none") +
  geom_col() +
  labs(title = 'Figure 2: Log2 ratio of beta in topic 2 (Mandela) / topic 1 (deKlerk)', y = 'Log ratio difference', x = 'Term') +
  coord_flip()

```

The difference in beta (per-topic-word probabilities) between **Mandela** and **deKlerk** reveal some interesting insights into their respective tenures. 

deKlerk made a single speech just before the 1994 democratic elections, expressing hope and optimism for a cohesive and cooperative future between all South Africans. 
Mandela, by contrast, presided over South Africa for the first 5 years of its nascent democracy, and had to grapple and confront many of the social and economic challenges that it presented.

The log ratios between both presidents' topic beta's is very low compared to other subsequent beta comparisons, however, suggesting much commonality in the topics they confronted and perhaps also their writing styles.
  
```{r lda_beta2, message=FALSE, warning=FALSE, results='hide', echo=FALSE}

# Visualize the second beta
beta_wide2 %>%
  group_by(direction = log_ratio > 0) %>%
  top_n(8, abs(log_ratio)) %>%
  ungroup() %>%
  mutate(term = reorder(term, log_ratio)) %>%
  ggplot(aes(term, log_ratio, fill = "#478ACA")) +
  theme(legend.position = "none") +
  geom_col() +
  labs(title = 'Figure 3: Log2 ratio of beta topic 3 (Mbeki) / topic 4 (Ramaphosa', y = 'Log ratio difference', x = 'Term') +
  coord_flip()

```

A comparison of the words with greatest differences between **Mbeki** and **Ramaphosa** reveal how they dealt with very different agendas during their respective tenures. 

Mbeki presided over the hosting of the 2010 FIFA World Cup (`soccer`, `cup`) whilst Ramaphosa had to deal with a global pandemic in 2020-2021 (`covid`, `pandemic`, `restore`) as well as the Eskom electricity crisis which had started already before his presidency (`shed`, `SOEs`, `restore`). 

On a side note, Mbeki appeared to be very fond of the phrase `"discharge their responsibilities"` which is why the word `discharge` stands out in the comparison.


```{r lda_beta3, message=FALSE, warning=FALSE, results='hide', echo=FALSE}

# Visualize the third beta
beta_wide3 %>%
  group_by(direction = log_ratio > 0) %>%
  top_n(8, abs(log_ratio)) %>%
  ungroup() %>%
  mutate(term = reorder(term, log_ratio)) %>%
  ggplot(aes(term, log_ratio, fill = "#478ACA")) +
  theme(legend.position = "none") +
  geom_col() +
  labs(title = 'Figure 4: Log2 ratio of beta topic 4 (Ramaphosa) / topic 5 (Zuma', y = 'Log ratio difference', x = 'Term') +
  coord_flip()

```

A comparison of the words with greatest differences between **Ramaphosa** and **Zuma** reveal differences in their presidential styles. 

Terms like `friend` and `compatriot` by Zuma's indicate his reliance on left-wing populist rhetoric in his speeches, whilst the use of terms like `SOEs` and `capture` by Ramaphosa suggest that Zuma did not adequately confront the issues of corruption and inefficiencies in state-owned-enterprises (including Eskom) that beset the legacy of his presidency (and which formed the basis of Ramaphosa's subsequent challenges).

### Topic modelling against Ramaphosa's speeches

```{r lda_beta4, message=FALSE, warning=FALSE, results='hide', echo=FALSE}

ramaphosa_sona <- sona %>% filter(pres == "Ramaphosa")

# turn into tidy text 
tidy_ramaphosa_sona <- ramaphosa_sona %>% 
  mutate(speech = str_replace_all(speech, replace_reg, '')) %>%
  unnest_tokens(word, speech, token = 'regex', pattern = unnest_reg) %>%
  filter(!word %in% stop_words$word, str_detect(word, '[A-Za-z]')) %>%
  dplyr::select(word, pres, date, filename) 

ramaphosa_sona_tdf <- tidy_ramaphosa_sona %>%
  group_by(filename,word) %>%
  count() %>%  
  ungroup()

# Remove common SONA words that are used very regularly, but which don't convey too much meaning
common_sona_reg <- 'wanna|madam|percent|speaker|madame|honourable|chairperson|development|national|ensure|deputy|africa|african|africans|south|southern|government|people|programme|economic|economy|country'
ramaphosa_sona_tdf <- ramaphosa_sona_tdf %>% filter(!grepl(common_sona_reg, word))

dtm_ramaphosa_sona <- ramaphosa_sona_tdf %>% cast_dtm(filename, word, n)

# Estimate the parameters of the topic model using LDA
ramaphosa_sona_lda <- LDA(dtm_ramaphosa_sona, k = 4, control = list(seed = 2023))

# Use the tidy() function by the  tidytext package 
# for extracting the per-topic-per-word probabilities, called β (“beta”), from the model
ramaphosa_sona_topics <- tidy(ramaphosa_sona_lda, matrix = "beta")

ramaphosa_sona_top_terms <- ramaphosa_sona_topics %>%
  group_by(topic) %>%
  slice_max(beta, n = 20) %>% 
  ungroup() %>%
  arrange(topic, -beta)

# Visualize using ggplot
#ramaphosa_sona_top_terms %>%
#  mutate(term = reorder_within(term, beta, topic)) %>%
#  ggplot(aes(beta, term, fill = factor(topic))) +
#  geom_col(show.legend = FALSE) +
#  facet_wrap(~ topic, scales = "free") +
#  labs(title = "Figure 5 : Top terms per LDA-generated topic - Ramaphosa Speeches") +
#  scale_y_reordered()
```


```{r lda_beta5, message=FALSE, warning=FALSE, results='hide', echo=FALSE}

ramaphosa_sona_documents <- tidy(ramaphosa_sona_lda, matrix = "gamma")

# Determine which president has the highest gamma score per topic
ramaphosa_sona_documents %>%
  group_by(topic) %>%
  slice_max(order_by = gamma, n = 1) %>%
  ungroup()

ramaphosa_sona_documents <- ramaphosa_sona_documents %>% filter(gamma > 0.9) %>% mutate(gamma = round(gamma, 3))

```

```{r ram.prob, echo=FALSE}
#| label: tbl-ram-probs
#| tbl-cap: "Ramaphosa-Per-Topic Probabilities"
#| tbl-colwidths: [60,20,20]

# display the president per-topic probabilities
# kable(ramaphosa_sona_documents)
```


```{r lda_beta6, message=FALSE, warning=FALSE, results='hide', echo=FALSE}

ramaphosa_beta_wide <- ramaphosa_sona_topics %>%
  mutate(topic = paste0("topic", topic)) %>%
  pivot_wider(names_from = topic, values_from = beta) %>% 
  filter(topic4 > .001 | topic3 > .001) %>%
  mutate(log_ratio = log2(topic3 / topic4))

# Visualize
ramaphosa_beta_wide %>%
  group_by(direction = log_ratio > 0) %>%
  top_n(10, abs(log_ratio)) %>%
  ungroup() %>%
  mutate(term = reorder(term, log_ratio)) %>%
  ggplot(aes(term, log_ratio, fill = "#478aca")) +
  theme(legend.position = "none") +
  geom_col() +
  labs(title = 'Figure 5: Log2 ratio of beta in 2019 post-election speech / 2023 speech', y = 'Log ratio difference', x = 'Term') +
  coord_flip()

```

We end the section of topic modelling with a look at the greatest word differences between Ramaphosa's **2019 post-election speech**, and the one he delivered in **2023**. 
Terms in 2019 include `dream`, `comfort`, `bold` and `NDP` (the *National Development Plan*, initiated in 2013, which aims to eliminate poverty and reduce inequality by 2030).

Terms in the 2023 include `pandemic`, `disaster`, `overcome`, `transition`, and tellingly, not a single mention of the *National Development Plan*. 

This suggests the use of optimistic and idealistic terms during an election year that support a political agenda, that is not evident in non-election years. 


## Discussion & Conclusion

### Sentiment Analysis

### Topic Modelling

Topic modelling against presidential speeches revealed a powerful tool for helping gain insight into themes and topics or speeches across presidents and over time. Topics between presidents revealed a lot of similarity in terms of common words and a general theme of progress, development, investment etc. (which is typical in every presidential state-of-the-nation speech), but subtle topic and word differences revealed interesting insights that prompted further analysis of individual speeches and presidents.  

### References

The class makes various changes to the way that references are handled. The class loads `natbib`, and also the appropriate bibliography style. References can be made using the normal method; the citation should be placed before any punctuation, as the class will move it if using a superscript citation style [@Garnier2007]. The use of `natbib` allows the use of the various citation commands of that package have shown something. Long lists of authors will be automatically truncated in most article formats, but not in supplementary information or reviews. If you encounter problems with the citation macros, please check that your copy of `natbib` is up to date. The demonstration database file `bibliography.bib` shows how to complete entries correctly.

Multiple citations to be combined into a list can be given as a single citation. This uses the `mciteplus` package. Citations other than the first of the list should be indicated with a star.

The class also handles notes to be added to the bibliography. These should be given in place in the document. As with citations, the text should be placed before punctuation. A note is also generated if a citation has an optional note. This assumes that the whole work has already been cited: odd numbering will result if this is not the case .


## References
